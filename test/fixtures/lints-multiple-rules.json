{"lints":{"lint":[{"src":"C:\\Users\\rlouapre\\Projects\\ml\\marklogic_amc-git\\src\\app\\lib\\elapsed-time-lib.xqy", "rule":[{"name":"declare function return type", "level":"warn", "occurrences":"1", "source":["function elapsedtime:get-time() {\n  $elapsed-time-array\n}"]}]},{"src":"C:\\Users\\rlouapre\\Projects\\ml\\marklogic_amc-git\\src\\app\\lib\\import-lib-old-version.xqy", "rule":[{"name":"avoid using xdmp:eval and xdmp:value", "level":"warn", "occurrences":"3", "source":["function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}"]},{"name":"declare function return type", "level":"warn", "occurrences":"5", "source":["function get-template($template-name as xs:string) {\n   \/import:template[import:name = $template-name]\n}","function get-model-templates($model-name) {\n   \/import:template[import:model\/@name = $model-name]\n}","function convert-xlsx(\n  $doc as item(),\n  $template as element(import:template)\n) {\n   convert-xlsx( $doc,\n    $template,\n    $default-options\n   )\n}","function import:convert-xlsx(\n   $doc as item(),\n   $template as element(import:template),\n   $options as element(import:options)\n) {\n    let $excel-map := excel:load($doc)\n    let $ss        := excel:shared-strings-map($excel-map)\n    let $load-map  := map:map()\n    let $column-header := $options\/import:column-headers = fn:true()\n    let $start-row  :=\n        if($column-header = fn:true()) then 2 else 1\n    let $sheets :=  \n       for $sheet in excel:get-sheet-names($excel-map) \n       let $sheet-data   := excel:get-sheet-by-name($excel-map,$sheet)\n       let $column-names := excel:get-sheet-column-names-map($sheet-data,$ss)\n       let $columns := \n                  for $col at $cpos in $column-names\n                  return <column id=\"{$col}\" index=\"{$cpos}\"  xmlns=\"http:\/\/marklogic.com\/import\"><\/column>\n       let $rows := \n          for $row at $rpos in fn:subsequence(excel:get-sheet-rows($sheet-data),$start-row)\n          return\n            <row index=\"{$rpos}\"  xmlns=\"http:\/\/marklogic.com\/import\">{\n              excel:map-row-cells-to-elements-map($row, $column-names, $ss)\n            }<\/row>\n             \n       return <sheet name=\"{$sheet}\"  xmlns=\"http:\/\/marklogic.com\/import\">\n                  <columns>{$columns}<\/columns>\n                  <rows>{$rows}<\/rows>\n              <\/sheet>\nreturn  \n   <data xmlns=\"http:\/\/marklogic.com\/import\">{\n    $sheets\n   }<\/data>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}"]},{"name":"declare function parameter types", "level":"warn", "occurrences":"1", "source":["function get-model-templates($model-name) {\n   \/import:template[import:model\/@name = $model-name]\n}"]},{"name":"avoid long functions", "level":"warn", "occurrences":"2", "source":["function import:convert-xlsx(\n   $doc as item(),\n   $template as element(import:template),\n   $options as element(import:options)\n) {\n    let $excel-map := excel:load($doc)\n    let $ss        := excel:shared-strings-map($excel-map)\n    let $load-map  := map:map()\n    let $column-header := $options\/import:column-headers = fn:true()\n    let $start-row  :=\n        if($column-header = fn:true()) then 2 else 1\n    let $sheets :=  \n       for $sheet in excel:get-sheet-names($excel-map) \n       let $sheet-data   := excel:get-sheet-by-name($excel-map,$sheet)\n       let $column-names := excel:get-sheet-column-names-map($sheet-data,$ss)\n       let $columns := \n                  for $col at $cpos in $column-names\n                  return <column id=\"{$col}\" index=\"{$cpos}\"  xmlns=\"http:\/\/marklogic.com\/import\"><\/column>\n       let $rows := \n          for $row at $rpos in fn:subsequence(excel:get-sheet-rows($sheet-data),$start-row)\n          return\n            <row index=\"{$rpos}\"  xmlns=\"http:\/\/marklogic.com\/import\">{\n              excel:map-row-cells-to-elements-map($row, $column-names, $ss)\n            }<\/row>\n             \n       return <sheet name=\"{$sheet}\"  xmlns=\"http:\/\/marklogic.com\/import\">\n                  <columns>{$columns}<\/columns>\n                  <rows>{$rows}<\/rows>\n              <\/sheet>\nreturn  \n   <data xmlns=\"http:\/\/marklogic.com\/import\">{\n    $sheets\n   }<\/data>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}"]},{"name":"avoid nesting FLWOR expressions more than one level deep", "level":"warn", "occurrences":"6", "source":["function import:convert-xlsx(\n   $doc as item(),\n   $template as element(import:template),\n   $options as element(import:options)\n) {\n    let $excel-map := excel:load($doc)\n    let $ss        := excel:shared-strings-map($excel-map)\n    let $load-map  := map:map()\n    let $column-header := $options\/import:column-headers = fn:true()\n    let $start-row  :=\n        if($column-header = fn:true()) then 2 else 1\n    let $sheets :=  \n       for $sheet in excel:get-sheet-names($excel-map) \n       let $sheet-data   := excel:get-sheet-by-name($excel-map,$sheet)\n       let $column-names := excel:get-sheet-column-names-map($sheet-data,$ss)\n       let $columns := \n                  for $col at $cpos in $column-names\n                  return <column id=\"{$col}\" index=\"{$cpos}\"  xmlns=\"http:\/\/marklogic.com\/import\"><\/column>\n       let $rows := \n          for $row at $rpos in fn:subsequence(excel:get-sheet-rows($sheet-data),$start-row)\n          return\n            <row index=\"{$rpos}\"  xmlns=\"http:\/\/marklogic.com\/import\">{\n              excel:map-row-cells-to-elements-map($row, $column-names, $ss)\n            }<\/row>\n             \n       return <sheet name=\"{$sheet}\"  xmlns=\"http:\/\/marklogic.com\/import\">\n                  <columns>{$columns}<\/columns>\n                  <rows>{$rows}<\/rows>\n              <\/sheet>\nreturn  \n   <data xmlns=\"http:\/\/marklogic.com\/import\">{\n    $sheets\n   }<\/data>\n}","function import:convert-xlsx(\n   $doc as item(),\n   $template as element(import:template),\n   $options as element(import:options)\n) {\n    let $excel-map := excel:load($doc)\n    let $ss        := excel:shared-strings-map($excel-map)\n    let $load-map  := map:map()\n    let $column-header := $options\/import:column-headers = fn:true()\n    let $start-row  :=\n        if($column-header = fn:true()) then 2 else 1\n    let $sheets :=  \n       for $sheet in excel:get-sheet-names($excel-map) \n       let $sheet-data   := excel:get-sheet-by-name($excel-map,$sheet)\n       let $column-names := excel:get-sheet-column-names-map($sheet-data,$ss)\n       let $columns := \n                  for $col at $cpos in $column-names\n                  return <column id=\"{$col}\" index=\"{$cpos}\"  xmlns=\"http:\/\/marklogic.com\/import\"><\/column>\n       let $rows := \n          for $row at $rpos in fn:subsequence(excel:get-sheet-rows($sheet-data),$start-row)\n          return\n            <row index=\"{$rpos}\"  xmlns=\"http:\/\/marklogic.com\/import\">{\n              excel:map-row-cells-to-elements-map($row, $column-names, $ss)\n            }<\/row>\n             \n       return <sheet name=\"{$sheet}\"  xmlns=\"http:\/\/marklogic.com\/import\">\n                  <columns>{$columns}<\/columns>\n                  <rows>{$rows}<\/rows>\n              <\/sheet>\nreturn  \n   <data xmlns=\"http:\/\/marklogic.com\/import\">{\n    $sheets\n   }<\/data>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}","function import-xlsx-data(\n  $data as element(import:data),\n  $template as element(import:template)\n) {\n        let $model-name := xs:string($template\/import:model\/@name)\n        let $model := domain:get-model($model-name)\n        let $_ := ( (:Sanity Checks:)\n           if($model-name and $model) then () else fn:error(xs:QName(\"MODEL-NOT-EXISTS\"),\"The model does not exist\",$model-name)\n        )          \n        let $null-values := $template\/import:null-value  \n        let $constraint-qname :=\n           let $constraint:= $template\/import:constraint\n           let $qname := fn:QName($constraint\/import:name\/@namespace, $constraint\/import:name\/@local-name)\n           return\n             $qname\n        let $rmap-func-string := \n              \"function($row) {\" || \n              \"let $column := \n                function($index) {\n                  let $value := \n                        if($index castable as xs:integer) \n                        then fn:string(($row\/field)[@col = $index])\n                        else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then '' else $value,'')[1]\n                }\n              let $rmap := map:map()\n              let $_ := (\n              \" ||\n              fn:string-join(\n              for $mapping in $template\/import:mapping return \"map:put($rmap,'\" ||$mapping\/@to || \"',\" || $mapping\/@from || \")\"\n              ,\",\")\n              || \") return $rmap }\" \n        let $rmap-func := xdmp:value($rmap-func-string)\n       \n        let $updates :=  \n          for $row  at $rpos in fn:subsequence($data\/import:sheet\/import:rows\/import:row,1)\n          let $rmap := $rmap-func($row)\n          let $column := \n             function($index) {\n                  let $value := \n                  if($index castable as xs:integer) \n                  then fn:string(($row\/field)[@col = $index])\n                  else fn:string(($row\/field)[@columnName = $index])\n                  return \n                    (if($value = $null-values) then \"\" else $value,\"\")[1]\n             }\n          let $constraint-value := xdmp:value($template\/import:constraint\/import:value)\n          let $constraint-params := map:map()\n\n          let $key-query := cts:and-query((cts:element-value-query($constraint-qname,$constraint-value)))\n          let $_ := map:put($constraint-params,\"_query\",$key-query)\n          let $exists := model:exists($model,$constraint-params)\n          return try {\n             if(map:count($rmap) = 0) then fn:error(xs:QName(\"NO-COLUMNS\"),\"There is column data \",()) else (),\n             if($exists) \n             then \n               let $current := (model:filter($model,$constraint-params))[1]\n               let $identity-field := domain:get-model-identity-field($model)\n               let $identity-value := domain:get-field-value($identity-field,$current)  \n               let $_ := map:put($rmap,$identity-field\/@name,$identity-value)\n               return (\n                 let $record := model:update($model,$rmap,(),fn:true())\n                 return \n                    <rowStatus pos=\"{$rpos}\" status=\"Updated\" id=\"{$record\/*:uuid}\" xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n             else (\n              let $record := model:create($model,$rmap,(),xdmp:eval(\"xdmp:default-permissions()\",(),<options xmlns=\"xdmp:eval\"><user-id>{xdmp:user(\"swatadmin\")}<\/user-id><\/options>))\n              return \n                 <rowStatus pos=\"{$rpos}\" status=\"Created\" id=\"{$record\/*:uuid}\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\" \/>\n              )\n              } catch * {\n              <rowStatus pos=\"{$rpos}\" status=\"Error\"  xmlns=\"http:\/\/marklogic.com\/import\" key=\"{$constraint-value}\">\n                <message>{\"Could not import row(\" || fn:string($rpos) || \")\" }<\/message>\n                <innerException>{$err:value}<\/innerException>\n              <\/rowStatus> }\n        return \n           <import-log xmlns=\"http:\/\/marklogic.com\/import\" elapsed=\"{xdmp:elapsed-time()}\">\n           {$updates}\n           <\/import-log>\n}"]}]}]}}